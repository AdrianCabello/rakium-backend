// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  client_admin
  client_user
}

enum ProjectStatus {
  draft
  published
  archived
}

enum SubscriptionStatus {
  active
  cancelled
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model Tenant {
  id            String         @id @default(uuid())
  name          String
  contactEmail  String
  users         User[]
  projects      Project[]
  services      Service[]
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Project {
  id          String        @id @default(uuid())
  tenantId    String
  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  name        String
  description String?
  status      ProjectStatus @default(draft)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([tenantId])
}

model Service {
  id            String         @id @default(uuid())
  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  name          String
  description   String?
  price         Float
  isActive      Boolean        @default(true)
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([tenantId])
}

model Subscription {
  id        String             @id @default(uuid())
  tenantId  String
  tenant    Tenant             @relation(fields: [tenantId], references: [id])
  serviceId String
  service   Service            @relation(fields: [serviceId], references: [id])
  status    SubscriptionStatus @default(active)
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([tenantId])
  @@index([serviceId])
}
